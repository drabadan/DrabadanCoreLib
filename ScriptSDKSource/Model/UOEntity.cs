/*
███████╗ ██████╗██████╗ ██╗██████╗ ████████╗███████╗██████╗ ██╗  ██╗
██╔════╝██╔════╝██╔══██╗██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██║ ██╔╝
███████╗██║     ██████╔╝██║██████╔╝   ██║   ███████╗██║  ██║█████╔╝ 
╚════██║██║     ██╔══██╗██║██╔═══╝    ██║   ╚════██║██║  ██║██╔═██╗ 
███████║╚██████╗██║  ██║██║██║        ██║   ███████║██████╔╝██║  ██╗
╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝╚═╝        ╚═╝   ╚══════╝╚═════╝ ╚═╝  ╚═╝
*/
using System;
using System.Collections.Generic;
using System.Linq;
using DrabadanCoreLib.Configuration;
using DrabadanCoreLib.Data;
using StealthAPI;
using ContextMenu = DrabadanCoreLib.ContextMenus.ContextMenu;

namespace DrabadanCoreLib
{
    /// <summary>
    /// UOEntity class is the most raw model wich describes the functionality and properties of an object in UO.
    /// </summary>		
    public class UOEntity
    {
        /// <summary>
        /// Returns the unique ID of object.
        /// </summary>
        public virtual Serial Serial { get; set; }

        /// <summary>
        /// Returns the geographical location of object.
        /// </summary>
        public virtual Point3D Location
        {
            get
            {
                if (!Valid)
                    return new Point3D(0, 0, 0);

                dynamic x = Stealth.Client.GetX(Serial.Value);
                dynamic y = Stealth.Client.GetY(Serial.Value);
                dynamic z = Stealth.Client.GetZ(Serial.Value);

                return new Point3D(x, y, z);
            }
        }

        /// <summary>
        /// Returns if the client knows about this object.
        /// </summary>
        public virtual bool Valid
        {
            get { return Stealth.Client.IsObjectExists(Serial.Value); }
        }

        /// <summary>
        /// Returns the direction of object.
        /// </summary>
        public virtual Direction Direction
        {
            get
            {
                dynamic v = Serial.Value;
                dynamic d = Stealth.Client.GetDirection(v);
                dynamic l = Enum.GetValues(typeof(Direction)) as byte[];
                if (l == null)
                    return Direction.Invalid;
                if (l.Contains(d))
                    return (Direction)d;
                return Direction.Invalid;
            }
        }

        /// <summary>
        /// Returns the ID of Color (In UO called hue).
        /// </summary>
        public virtual ushort Color
        {
            get { return Stealth.Client.GetColor(Serial.Value); }
        }

        /// <summary>
        /// Returns the ID of Graphic (In UO called object type).
        /// </summary>
        public virtual ushort ObjectType
        {
            get { return Stealth.Client.GetType(Serial.Value); }
        }

        /// <summary>
        /// Returns the distance from playter towards this object.
        /// </summary>
        public virtual int Distance
        {
            get { return Stealth.Client.GetDistance(Serial.Value); }
        }

        /// <summary>
        /// Stores the localized properties generated by UpdateLocalizedProperties().
        /// </summary>
        public virtual List<ClilocItemRec> Properties { get; protected set; }

        /// <summary>
        /// Stores the text properties generated by UpdateTextProperties().
        /// </summary>
        public virtual string Tooltip { get; protected set; }

        /// <summary>
        /// Returns the layer of object, if this is equipped to any paperdoll.
        /// </summary>
        public virtual Layer Layer
        {
            get
            {
                dynamic b = Stealth.Client.GetLayer(Serial.Value);
                dynamic l = Enum.GetValues(typeof(Layer)) as byte[];
                if (l == null)
                    return Layer.Invalid;
                if (l.Contains(b))
                    return (Layer)b;
                return Layer.Invalid;
            }
        }

        /// <summary>
        /// Stores a context menu object with reference to this object.
        /// </summary>
        public virtual ContextMenu ContextMenu { get; protected set; }

        /// <summary>
        /// Returns a parsed and splitted list of text properties.
        /// </summary>
        public virtual List<string> ParsedToolTip
        {
            get { return Tooltip.Split('|').ToList(); }
        }

        /// <summary>
        /// Returns the parent of object.
        /// </summary>
        public virtual UOEntity Parent
        {
            get { return new UOEntity(Valid ? Stealth.Client.GetParent(Serial.Value) : 0); }
        }

        /// <summary>
        /// Returns the top parent of object.
        /// </summary>
        public virtual UOEntity RootParent
        {
            get
            {
                var p = Parent;
                var rp = p.Parent;
                while (rp.Valid)
                {
                    p = rp;
                    rp = p.Parent;
                }
                return p;
            }
        }
        /// <summary>
        /// Performs a double click onto object.
        /// </summary>
        /// <returns></returns>
        public virtual bool DoubleClick()
        {
            var Result = Valid;
            if (Result)
                Stealth.Client.UseObject(Serial.Value);
            return Result;
        }

        /// <summary>
        /// Performs a single click onto object.
        /// </summary>
        /// <returns></returns>
        public virtual bool Click()
        {
            var Result = Valid;
            if (Result)
                Stealth.Client.ClickOnObject(Serial.Value);
            return Result;
        }

        /// <summary>
        /// Alternative constructor
        /// </summary>
        /// <param name="ObjectID"></param>
        public UOEntity(uint ObjectID)
            : this(new Serial(ObjectID))
        {
        }

        /// <summary>
        /// Default constructor.
        /// </summary>
        /// <param name="serial"></param>
        public UOEntity(Serial serial)
        {
            ContextMenu = new ContextMenu(this);
            Serial = serial;
            Tooltip = string.Empty;
            Properties = new List<ClilocItemRec>();
        }

        /// <summary>
        /// Performs attachment of object to context menu system.
        /// </summary>
        /// <returns></returns>
        public virtual bool AttachContextMenu()
        {
            ContextMenu = new ContextMenu(this);
            return ContextMenu.Parse();
        }

        /// <summary>
        /// Performs API-Call to read localized properties.
        /// </summary>
        /// <returns></returns>
        public virtual bool UpdateLocalizedProperties()
        {
            Properties = Stealth.Client.GetClilocRec(Serial.Value);
            return Properties.Count > 0;
        }

        /// <summary>
        /// Performs API-Call to read text properties.
        /// </summary>
        /// <returns></returns>
        public virtual bool UpdateTextProperties()
        {
            var delay = ObjectOptions.ToolTipDelay;
            Tooltip = delay > 0
                ? Stealth.Client.GetTooltip(Serial.Value, delay)
                : Stealth.Client.GetTooltip(Serial.Value);
            return !Tooltip.Trim().Equals(string.Empty);
        }
    }
}